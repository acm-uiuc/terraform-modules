import path from 'path';
      import { fileURLToPath } from 'url';
      import { createRequire as topLevelCreateRequire } from 'module';
      const require = topLevelCreateRequire(import.meta.url);
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
import{LambdaClient as g,InvokeCommand as v,InvokeWithResponseStreamCommand as I}from"@aws-sdk/client-lambda";import{TextDecoder as p}from"util";var m=new g({}),u=new p;async function y(a,t){let i=Array.from({length:t},()=>m.send(new v({FunctionName:a,Payload:JSON.stringify({action:"warmer"})}))),l=await Promise.allSettled(i),s=new Set;return l.forEach(e=>{if(e.status==="fulfilled"&&e.value.Payload)try{let n=u.decode(e.value.Payload),r=JSON.parse(n);r.instanceId&&s.add(r.instanceId)}catch(n){console.error("Error parsing payload from standard function:",n)}else e.status==="rejected"&&console.error("Standard invocation failed:",e.reason.message)}),s}async function N(a,t){let i=Array.from({length:t},()=>m.send(new I({FunctionName:a,Payload:JSON.stringify({action:"warmer"})}))),l=await Promise.allSettled(i),s=new Set;for(let e of l)if(e.status==="fulfilled"&&e.value.EventStream)try{let n=[];for await(let o of e.value.EventStream)o.PayloadChunk&&o.PayloadChunk.Payload&&n.push(o.PayloadChunk.Payload);let r=u.decode(Buffer.concat(n)),c=JSON.parse(r);c.instanceId&&s.add(c.instanceId)}catch(n){console.error("Error processing stream from streaming function:",n)}else e.status==="rejected"&&console.error("Streaming invocation failed:",e.reason.message);return s}var w=async a=>{let{lambdaName:t,numInstancesStr:i,maxWavesStr:l,isStreaming:s}={lambdaName:process.env.LAMBDA_NAME,numInstancesStr:process.env.NUM_INSTANCES,maxWavesStr:process.env.MAX_WAVES,isStreaming:(process.env.IS_STREAMING||"false").toLowerCase()==="true"};if(!t||!i)throw new Error("Env vars 'LAMBDA_NAME' and 'NUM_INSTANCES' are required.");let e=parseInt(i,10),n=parseInt(l||"5",10),r=0,c=0,o=new Set;console.log(`Warming target: ${t} (Streaming: ${s})`);for(let d=1;d<=n;d++){if(c=d,e-o.size<=0){console.log("Target met. No more waves needed.");break}console.log(`-- - Wave ${d} of ${n} --- `);let f=s?await N(t,e):await y(t,e);r+=e,f.forEach(S=>o.add(S)),console.log(`Wave ${d} complete.Found ${o.size} of ${e} unique instances.`)}return console.log(`Warming complete.Found ${o.size} unique instances from ${r} total invocations over ${c} waves.`),{statusCode:200,body:JSON.stringify({targetInstances:e,warmedInstances:o.size,totalInvocations:r,wavesCompleted:c,instanceIds:[...o]})}};import.meta.url===`file://${process.argv[1]}`&&(process.env.LAMBDA_NAME="my-target-lambda-function-name",process.env.NUM_INSTANCES="3",process.env.MAX_WAVES="5",process.env.IS_STREAMING="false",console.log("Running warmer in local test mode..."),w({}).then(a=>{console.log(`
--- Final Result ---`),console.log(JSON.parse(a.body))}).catch(a=>{console.error("Local test run failed:",a)}));export{w as handler};
//# sourceMappingURL=lambda.mjs.map
